"""add distinct permit parcels and inferred_geometry

Revision ID: 310017c371fa
Revises: 861144fdf6d4
Create Date: 2024-09-10 11:17:45.122621

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from geoalchemy2 import Geometry

# revision identifiers, used by Alembic.
revision: str = "310017c371fa"
down_revision: Union[str, None] = "861144fdf6d4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_geospatial_column(
        "parcel",
        sa.Column(
            "inferred_geometry",
            Geometry(
                geometry_type="POLYGON",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
    )
    op.create_geospatial_index(
        "idx_parcel_inferred_geometry",
        "parcel",
        ["inferred_geometry"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.add_column(
        "permit",
        sa.Column("registered_location_parcel_id", sa.Integer(), nullable=False),
    )
    op.add_column(
        "permit",
        sa.Column("geocoded_address_location_parcel_id", sa.Integer(), nullable=False),
    )
    op.drop_constraint("permit_parcel_id_fkey", "permit", type_="foreignkey")
    op.create_foreign_key(
        None, "permit", "parcel", ["geocoded_address_location_parcel_id"], ["id"]
    )
    op.create_foreign_key(
        None, "permit", "parcel", ["registered_location_parcel_id"], ["id"]
    )
    op.drop_column("permit", "parcel_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "permit",
        sa.Column("parcel_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "permit", type_="foreignkey")
    op.drop_constraint(None, "permit", type_="foreignkey")
    op.create_foreign_key(
        "permit_parcel_id_fkey", "permit", "parcel", ["parcel_id"], ["id"]
    )
    op.drop_column("permit", "geocoded_address_location_parcel_id")
    op.drop_column("permit", "registered_location_parcel_id")
    op.drop_geospatial_index(
        "idx_parcel_inferred_geometry",
        table_name="parcel",
        postgresql_using="gist",
        column_name="inferred_geometry",
    )
    op.drop_geospatial_column("parcel", "inferred_geometry")
    # ### end Alembic commands ###
