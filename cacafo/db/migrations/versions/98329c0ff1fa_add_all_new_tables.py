"""add all new tables

Revision ID: 98329c0ff1fa
Revises: baed2eafee82
Create Date: 2024-09-09 14:21:54.880644

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from geoalchemy2 import Geometry

# revision identifiers, used by Alembic.
revision: str = "98329c0ff1fa"
down_revision: Union[str, None] = "baed2eafee82"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_geospatial_table(
        "animal_type_annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("animal_type", sa.String(), nullable=False),
        sa.Column(
            "location",
            Geometry(
                geometry_type="POINT",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_animal_type_annotation_location",
        "animal_type_annotation",
        ["location"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_geospatial_table(
        "cafo_annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("is_cafo", sa.Boolean(), nullable=False),
        sa.Column("is_afo", sa.Boolean(), nullable=False),
        sa.Column(
            "location",
            Geometry(
                geometry_type="POINT",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_cafo_annotation_location",
        "cafo_annotation",
        ["location"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_geospatial_table(
        "construction_annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "location",
            Geometry(
                geometry_type="POINT",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("construction_lower_bound", sa.DateTime(), nullable=False),
        sa.Column("construction_upper_bound", sa.DateTime(), nullable=False),
        sa.Column("destruction_lower_bound", sa.DateTime(), nullable=False),
        sa.Column("destruction_upper_bound", sa.DateTime(), nullable=False),
        sa.Column("significant_population_change", sa.Boolean(), nullable=False),
        sa.Column("is_primarily_indoors", sa.Boolean(), nullable=False),
        sa.Column("has_lagoon", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_construction_annotation_location",
        "construction_annotation",
        ["location"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_table(
        "parcel_owner_name_annotations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("owner_name", sa.String(), nullable=False),
        sa.Column("related_owner_name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_table(
        "facility",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("hash", sa.String(), nullable=False),
        sa.Column(
            "geometry",
            Geometry(
                geometry_type="MULTIPOLYGON",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("county_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["county_id"],
            ["county.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("hash"),
    )
    op.create_geospatial_index(
        "idx_facility_geometry",
        "facility",
        ["geometry"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_geospatial_table(
        "image",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "geometry",
            Geometry(
                geometry_type="POLYGON",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("model_score", sa.String(), nullable=False),
        sa.Column("label_status", sa.String(), nullable=False),
        sa.Column("stratum", sa.String(), nullable=False),
        sa.Column("county_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["county_id"],
            ["county.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_image_geometry",
        "image",
        ["geometry"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_table(
        "parcel",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("owner", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column("county_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["county_id"],
            ["county.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_table(
        "building",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "geometry",
            Geometry(
                geometry_type="POLYGON",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "image_xy_geometry",
            Geometry(
                geometry_type="POLYGON",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("parcel_id", sa.Integer(), nullable=False),
        sa.Column("image_id", sa.Integer(), nullable=False),
        sa.Column("excluded_at", sa.DateTime(), nullable=True),
        sa.Column("exclude_reason", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["image_id"],
            ["image.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parcel_id"],
            ["parcel.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_building_geometry",
        "building",
        ["geometry"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_geospatial_index(
        "idx_building_image_xy_geometry",
        "building",
        ["image_xy_geometry"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_table(
        "image_annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column("image_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["image_id"],
            ["image.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_table(
        "permit",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.Column(
            "registered_location",
            Geometry(
                geometry_type="POINT",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column(
            "geocoded_address_location",
            Geometry(
                geometry_type="POINT",
                spatial_index=False,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("parcel_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["parcel_id"],
            ["parcel.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_geospatial_index(
        "idx_permit_geocoded_address_location",
        "permit",
        ["geocoded_address_location"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_geospatial_index(
        "idx_permit_registered_location",
        "permit",
        ["registered_location"],
        unique=False,
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.create_table(
        "building_relationship",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("reason", sa.String(), nullable=False),
        sa.Column("weight", sa.Float(), nullable=False),
        sa.Column("building_id", sa.Integer(), nullable=False),
        sa.Column("related_building_id", sa.Integer(), nullable=False),
        sa.CheckConstraint("building_id != related_building_id"),
        sa.ForeignKeyConstraint(
            ["building_id"],
            ["building.id"],
        ),
        sa.ForeignKeyConstraint(
            ["related_building_id"],
            ["building.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_column("county", "longitude")
    op.drop_column("county", "latitude")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "county",
        sa.Column(
            "latitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "county",
        sa.Column(
            "longitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_table("building_relationship")
    op.drop_geospatial_index(
        "idx_permit_registered_location",
        table_name="permit",
        postgresql_using="gist",
        column_name="registered_location",
    )
    op.drop_geospatial_index(
        "idx_permit_geocoded_address_location",
        table_name="permit",
        postgresql_using="gist",
        column_name="geocoded_address_location",
    )
    op.drop_geospatial_table("permit")
    op.drop_table("image_annotation")
    op.drop_geospatial_index(
        "idx_building_image_xy_geometry",
        table_name="building",
        postgresql_using="gist",
        column_name="image_xy_geometry",
    )
    op.drop_geospatial_index(
        "idx_building_geometry",
        table_name="building",
        postgresql_using="gist",
        column_name="geometry",
    )
    op.drop_geospatial_table("building")
    op.drop_table("parcel")
    op.drop_geospatial_index(
        "idx_image_geometry",
        table_name="image",
        postgresql_using="gist",
        column_name="geometry",
    )
    op.drop_geospatial_table("image")
    op.drop_geospatial_index(
        "idx_facility_geometry",
        table_name="facility",
        postgresql_using="gist",
        column_name="geometry",
    )
    op.drop_geospatial_table("facility")
    op.drop_table("parcel_owner_name_annotations")
    op.drop_geospatial_index(
        "idx_construction_annotation_location",
        table_name="construction_annotation",
        postgresql_using="gist",
        column_name="location",
    )
    op.drop_geospatial_table("construction_annotation")
    op.drop_geospatial_index(
        "idx_cafo_annotation_location",
        table_name="cafo_annotation",
        postgresql_using="gist",
        column_name="location",
    )
    op.drop_geospatial_table("cafo_annotation")
    op.drop_geospatial_index(
        "idx_animal_type_annotation_location",
        table_name="animal_type_annotation",
        postgresql_using="gist",
        column_name="location",
    )
    op.drop_geospatial_table("animal_type_annotation")
    # ### end Alembic commands ###
